//
//  Renderer.cpp
//  battlebombs
//
//  Created by Stephen Gowen on 2/22/14.
//  Copyright (c) 2014 Techne Games. All rights reserved.
//

#include "pch.h"
#include "Renderer.h"
#include "PlayerDynamicGameObject.h"
#include "Vector2D.h"
#include "GameConstants.h"
#include "Font.h"
#include "ResourceConstants.h"
#include "MapBorder.h"

Renderer::Renderer()
{
	m_worldBackgroundTextureRegion = std::unique_ptr<TextureRegion>(new TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_MOUNTAINS_DOOR = std::unique_ptr<TextureRegion>(new TextureRegion(MOUNTAINS_DOOR_TEXTURE_REGION_X, MOUNTAINS_DOOR_TEXTURE_REGION_Y, MOUNTAINS_DOOR_TEXTURE_REGION_WIDTH, MOUNTAINS_DOOR_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_TOP = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_TOP_TEXTURE_REGION_X, BORDER_TOP_TEXTURE_REGION_Y, BORDER_TOP_TEXTURE_REGION_WIDTH, BORDER_TOP_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_LEFT = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_LEFT_TEXTURE_REGION_X, BORDER_LEFT_TEXTURE_REGION_Y, BORDER_LEFT_TEXTURE_REGION_WIDTH, BORDER_LEFT_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_RIGHT = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_RIGHT_TEXTURE_REGION_X, BORDER_RIGHT_TEXTURE_REGION_Y, BORDER_RIGHT_TEXTURE_REGION_WIDTH, BORDER_RIGHT_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_BOTTOM_LEFT = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_BOTTOM_LEFT_TEXTURE_REGION_X, BORDER_BOTTOM_LEFT_TEXTURE_REGION_Y, BORDER_BOTTOM_LEFT_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_LEFT_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_BOTTOM_RIGHT = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_BOTTOM_RIGHT_TEXTURE_REGION_X, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_Y, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
	TR_BORDER_BOTTOM = std::unique_ptr<TextureRegion>(new TextureRegion(BORDER_BOTTOM_TEXTURE_REGION_X, BORDER_BOTTOM_TEXTURE_REGION_Y, BORDER_BOTTOM_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_TEXTURE_REGION_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));

	m_font = std::unique_ptr<Font>(new Font(FONT_TEXTURE_REGION_X, FONT_TEXTURE_REGION_Y, FONT_GLYPHS_PER_ROW, FONT_GLYPH_WIDTH, FONT_GLYPH_HEIGHT, GAME_TEXTURE_WIDTH, GAME_TEXTURE_HEIGHT));
    m_fScrollY = 0;
}

void Renderer::calcScrollYForPlayer(PlayerDynamicGameObject &player)
{
	if (player.getPosition().getY() > (SCREEN_HEIGHT / 2))
	{
		m_fScrollY = player.getPosition().getY() - (SCREEN_HEIGHT / 2);
		if (m_fScrollY > (SCREEN_HEIGHT + GRID_CELL_HEIGHT))
		{
			m_fScrollY = SCREEN_HEIGHT + GRID_CELL_HEIGHT;
		}
	}
	else
	{
		m_fScrollY = 0;
	}
}

TextureRegion& Renderer::getMapBorderTextureRegion(MapBorder &mapBorder)
{
	switch (mapBorder.getType())
	{
	case MOUNTAINS_DOOR:
		return *TR_MOUNTAINS_DOOR;
	case BORDER_TOP:
		return *TR_BORDER_TOP;
	case BORDER_LEFT:
		return *TR_BORDER_LEFT;
	case BORDER_RIGHT:
		return *TR_BORDER_RIGHT;
	case BORDER_BOTTOM_LEFT:
		return *TR_BORDER_BOTTOM_LEFT;
	case BORDER_BOTTOM_RIGHT:
		return *TR_BORDER_BOTTOM_RIGHT;
	case BORDER_BOTTOM:
	default:
		return *TR_BORDER_BOTTOM;
	}
}