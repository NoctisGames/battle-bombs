//
//  Assets.cpp
//  battlebombs
//
//  Created by Stephen Gowen on 2/22/14.
//  Copyright (c) 2014 Gowen Game Dev. All rights reserved.
//

#include "Assets.h"
#include "TextureRegion.h"
#include "PlayerDynamicGameObject.h"
#include "Vector2D.h"
#include "SpaceTile.h"
#include "MapBorder.h"
#include "InsideBlock.h"
#include "PlayerState.h"
#include "BombGameObject.h"
#include "Explosion.h"
#include "InsideBlock.h"
#include "BreakableBlock.h"
#include "PowerUp.h"
#include "Fire.h"
#include "FallingObjectShadow.h"
#include "FireBall.h"
#include "IceBall.h"
#include "IcePatch.h"
#include "DPadControl.h"
#include "PowerUpBarItem.h"
#include "ActiveButton.h"
#include "BombButton.h"
#include "PlayerAvatar.h"
#include "SpectatorControls.h"
#include "PlayerForceFieldState.h"
#include "PlayerRowAvatar.h"
#include "PlayerRowPlatformAvatar.h"
#include "CountDownNumberGameObject.h"
#include "DisplayGameOverGameObject.h"
#include "DisplayXMovingGameObject.h"
#include "GameEvent.h"
#include "WaitingForLocalSettingsInterface.h"
#include "EnableBotButton.h"
#include "BotDifficulty.h"
#include "EnablePowerUpButton.h"
#include "ChosenPowerUpFlags.h"
#include "StartButton.h"

#include <list>

// For logging error conditions
#include <iostream>

Assets * Assets::getInstance()
{
    static Assets *assets = new Assets();
    return assets;
}

TextureRegion& Assets::getWorldBackgroundTextureRegion()
{
	static TextureRegion textureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	return textureRegion;
}

TextureRegion& Assets::getSpaceTileTextureRegion(SpaceTile &spaceTile)
{
    static TextureRegion stNormalTr = TextureRegion(SPACE_TILE_TEXTURE_REGION_X, SPACE_TILE_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    static std::vector<TextureRegion> spaceTileDislodgingTextureRegions;
    if (spaceTileDislodgingTextureRegions.size() == 0)
    {
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_1_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_2_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_3_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_4_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_5_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_6_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_7_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileDislodgingTextureRegions.push_back(TextureRegion(SPACE_TILE_DISLODGING_FRAME_8_TEXTURE_REGION_X, SPACE_TILE_DISLODGING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float spaceTileDislodgingCycleTime = 0.90f;
    static std::vector<float> spaceTileDislodgingFrames;
    if (spaceTileDislodgingFrames.size() == 0)
    {
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.1f);
        spaceTileDislodgingFrames.push_back(0.2f);
    }
    
    static std::vector<TextureRegion> spaceTileFallingTextureRegions;
    if (spaceTileFallingTextureRegions.size() == 0)
    {
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_1_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_2_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_3_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_4_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_5_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_6_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        spaceTileFallingTextureRegions.push_back(TextureRegion(SPACE_TILE_FALLING_FRAME_7_TEXTURE_REGION_X, SPACE_TILE_FALLING_FRAMES_TEXTURE_REGION_Y, SPACE_TILE_TEXTURE_REGION_WIDTH, SPACE_TILE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float spaceTileFallingCycleTime = 5.00f;
    static std::vector<float> spaceTileFallingFrames;
    if (spaceTileFallingFrames.size() == 0)
    {
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(0.1f);
        spaceTileFallingFrames.push_back(5.4f);
    }
    
    switch (spaceTile.getSpaceTileState())
    {
        case ST_DISLODGING:
            return spaceTileDislodgingTextureRegions.at(getKeyFrameNumber(spaceTile.getStateTime(), spaceTileDislodgingCycleTime, spaceTileDislodgingFrames));
        case ST_FALLING:
        case ST_ENTERING_ATMOSPHERE:
            return spaceTileFallingTextureRegions.at(getKeyFrameNumber(spaceTile.getStateTime(), spaceTileFallingCycleTime, spaceTileFallingFrames));
        case ST_NORMAL:
        default:
            return stNormalTr;
    }
}

TextureRegion& Assets::getMapBorderTextureRegion(MapBorder &mapBorder)
{
	static TextureRegion TR_MOUNTAINS_DOOR = TextureRegion(MOUNTAINS_DOOR_TEXTURE_REGION_X, MOUNTAINS_DOOR_TEXTURE_REGION_Y, MOUNTAINS_DOOR_TEXTURE_REGION_WIDTH, MOUNTAINS_DOOR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_TOP = TextureRegion(BORDER_TOP_TEXTURE_REGION_X, BORDER_TOP_TEXTURE_REGION_Y, BORDER_TOP_TEXTURE_REGION_WIDTH, BORDER_TOP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_LEFT = TextureRegion(BORDER_LEFT_TEXTURE_REGION_X, BORDER_LEFT_TEXTURE_REGION_Y, BORDER_LEFT_TEXTURE_REGION_WIDTH, BORDER_LEFT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_RIGHT = TextureRegion(BORDER_RIGHT_TEXTURE_REGION_X, BORDER_RIGHT_TEXTURE_REGION_Y, BORDER_RIGHT_TEXTURE_REGION_WIDTH, BORDER_RIGHT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_BOTTOM_LEFT = TextureRegion(BORDER_BOTTOM_LEFT_TEXTURE_REGION_X, BORDER_BOTTOM_LEFT_TEXTURE_REGION_Y, BORDER_BOTTOM_LEFT_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_LEFT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_BOTTOM_RIGHT = TextureRegion(BORDER_BOTTOM_RIGHT_TEXTURE_REGION_X, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_Y, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_RIGHT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_BORDER_BOTTOM = TextureRegion(BORDER_BOTTOM_TEXTURE_REGION_X, BORDER_BOTTOM_TEXTURE_REGION_Y, BORDER_BOTTOM_TEXTURE_REGION_WIDTH, BORDER_BOTTOM_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);

	switch (mapBorder.getType())
	{
	case MOUNTAINS_DOOR:
		return TR_MOUNTAINS_DOOR;
	case BORDER_TOP:
		return TR_BORDER_TOP;
	case BORDER_LEFT:
		return TR_BORDER_LEFT;
	case BORDER_RIGHT:
		return TR_BORDER_RIGHT;
	case BORDER_BOTTOM_LEFT:
		return TR_BORDER_BOTTOM_LEFT;
	case BORDER_BOTTOM_RIGHT:
		return TR_BORDER_BOTTOM_RIGHT;
	case BORDER_BOTTOM:
	default:
		return TR_BORDER_BOTTOM;
	}
}

TextureRegion& Assets::getInsideBlockTextureRegion(InsideBlock &insideBlock)
{
    if(insideBlock.getInsideBlockState() == IB_NORMAL)
    {
        static TextureRegion insideBlockTextureRegion = TextureRegion(INSIDE_BLOCK_TEXTURE_REGION_X, INSIDE_BLOCK_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return insideBlockTextureRegion;
    }
    else if(insideBlock.getInsideBlockState() == IB_STRUCK_BY_METEOR)
    {
        static std::vector<TextureRegion> insideBlockStruckTextureRegions;
        if (insideBlockStruckTextureRegions.size() == 0)
        {
            insideBlockStruckTextureRegions.push_back(TextureRegion(INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAME_1_TEXTURE_REGION_X, INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAMES_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockStruckTextureRegions.push_back(TextureRegion(INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAME_2_TEXTURE_REGION_X, INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAMES_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockStruckTextureRegions.push_back(TextureRegion(INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAME_3_TEXTURE_REGION_X, INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAMES_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockStruckTextureRegions.push_back(TextureRegion(INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAME_4_TEXTURE_REGION_X, INSIDE_BLOCK_HIT_BY_FIRE_BALL_FRAMES_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.50f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.2f);
        }
        
        return insideBlockStruckTextureRegions.at(getKeyFrameNumber(insideBlock.getStateTime(), cycleTime, frames));
    }
    else if(insideBlock.getInsideBlockState() == IB_FREEZING)
    {
        static std::vector<TextureRegion> insideBlockFreezingTextureRegions;
        if (insideBlockFreezingTextureRegions.size() == 0)
        {
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_1_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_1_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_2_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_2_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_3_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_3_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_4_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_4_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_5_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_5_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            insideBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_6_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_6_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.70f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.2f);
        }
        
        return insideBlockFreezingTextureRegions.at(getKeyFrameNumber(insideBlock.getStateTime(), cycleTime, frames));
    }
    else if(insideBlock.getInsideBlockState() == IB_FROZEN)
    {
        static TextureRegion insideBlockFrozenTextureRegion = TextureRegion(FREEZING_INSIDE_BLOCK_FRAME_6_TEXTURE_REGION_X, FREEZING_INSIDE_BLOCK_FRAME_6_TEXTURE_REGION_Y, INSIDE_BLOCK_TEXTURE_REGION_WIDTH, INSIDE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return insideBlockFrozenTextureRegion;
    }
    else
    {
        // Default, but should never get this far...
        std::cout << "getInsideBlockTextureRegion else condition reached!" << std::endl;
        
        static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return defaultTextureRegion;
    }
}

TextureRegion& Assets::getNineTextureRegion()
{
    static TextureRegion insideBlockTextureRegion = TextureRegion(POWER_UP_ICON_FRAME_5_TEXTURE_REGION_X, POWER_UP_ICON_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return insideBlockTextureRegion;
}

TextureRegion& Assets::getOneTextureRegion()
{
    static TextureRegion insideBlockTextureRegion = TextureRegion(POWER_UP_ICON_FRAME_1_TEXTURE_REGION_X, POWER_UP_ICON_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return insideBlockTextureRegion;
}

TextureRegion& Assets::getBreakableBlockTextureRegion(BreakableBlock &breakableBlock)
{
    if(breakableBlock.getBreakableBlockState() == BB_NORMAL)
    {
        static TextureRegion textureRegion = TextureRegion(BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return textureRegion;
    }
    else if(breakableBlock.getBreakableBlockState() == EXPLODING)
    {
        static std::vector<TextureRegion> breakableBlockTextureRegions;
        if (breakableBlockTextureRegions.size() == 0)
        {
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_2_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_2_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_3_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_3_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_4_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_4_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_5_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_5_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_7_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_7_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_8_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_8_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_9_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_9_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockTextureRegions.push_back(TextureRegion(BREAKABLE_BLOCK_FRAME_10_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_10_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 1.00f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
        }
        
        return breakableBlockTextureRegions.at(getKeyFrameNumber(breakableBlock.getStateTime(), cycleTime, frames));
    }
    else if(breakableBlock.getBreakableBlockState() == BB_FREEZING)
    {
        static std::vector<TextureRegion> breakableBlockFreezingTextureRegions;
        if (breakableBlockFreezingTextureRegions.size() == 0)
        {
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_1_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_2_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_2_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_3_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_3_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_4_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_4_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_5_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_5_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            breakableBlockFreezingTextureRegions.push_back(TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.70f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.2f);
        }
        
        return breakableBlockFreezingTextureRegions.at(getKeyFrameNumber(breakableBlock.getStateTime(), cycleTime, frames));
    }
    else if(breakableBlock.getBreakableBlockState() == BB_FROZEN)
    {
        static TextureRegion breakableBlockFrozenTextureRegion = TextureRegion(FREEZING_BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_X, FREEZING_BREAKABLE_BLOCK_FRAME_6_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return breakableBlockFrozenTextureRegion;
    }
    else
    {
        static TextureRegion textureRegion = TextureRegion(BREAKABLE_BLOCK_FRAME_10_TEXTURE_REGION_X, BREAKABLE_BLOCK_FRAME_10_TEXTURE_REGION_Y, BREAKABLE_BLOCK_TEXTURE_REGION_WIDTH, BREAKABLE_BLOCK_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return textureRegion;
    }
}

TextureRegion& Assets::getWaitingForServerInterfaceTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(WAITING_PLAYERS_LIST_BACKGROUND_TEXTURE_REGION_X, WAITING_PLAYERS_LIST_BACKGROUND_TEXTURE_REGION_Y, WAITING_PLAYERS_LIST_BACKGROUND_TEXTURE_REGION_WIDTH, WAITING_PLAYERS_LIST_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getPlayerRowAvatarTextureRegion(PlayerRowAvatar &playerRowAvatar)
{
    static TextureRegion playerRowAvatarBlackTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_BLACK_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_BLACK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarBlueTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_BLUE_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_BLUE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarGreenTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_GREEN_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_GREEN_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarOrangeTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_ORANGE_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_ORANGE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarPinkTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_PINK_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_PINK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarRedTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_RED_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_RED_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarWhiteTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_WHITE_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_WHITE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowAvatarYellowTextureRegion = TextureRegion(INTERFACE_2_PLAYER_AVATAR_YELLOW_TEXTURE_REGION_X, INTERFACE_2_PLAYER_AVATAR_YELLOW_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    static TextureRegion playerRowBotAvatarBlackTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_BLACK_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_BLACK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarBlueTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_BLUE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_BLUE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarGreenTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_GREEN_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_GREEN_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarOrangeTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_ORANGE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_ORANGE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarPinkTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_PINK_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_PINK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarRedTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_RED_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_RED_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarWhiteTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_WHITE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_WHITE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarYellowTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_YELLOW_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_YELLOW_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (playerRowAvatar.getPlayerIndex())
    {
        case 0:
            return playerRowAvatar.isBot() ? playerRowBotAvatarBlackTextureRegion : playerRowAvatarBlackTextureRegion;
        case 1:
            return playerRowAvatar.isBot() ? playerRowBotAvatarBlueTextureRegion : playerRowAvatarBlueTextureRegion;
        case 2:
            return playerRowAvatar.isBot() ? playerRowBotAvatarGreenTextureRegion : playerRowAvatarGreenTextureRegion;
        case 3:
            return playerRowAvatar.isBot() ? playerRowBotAvatarOrangeTextureRegion : playerRowAvatarOrangeTextureRegion;
        case 4:
            return playerRowAvatar.isBot() ? playerRowBotAvatarPinkTextureRegion : playerRowAvatarPinkTextureRegion;
        case 5:
            return playerRowAvatar.isBot() ? playerRowBotAvatarRedTextureRegion : playerRowAvatarRedTextureRegion;
        case 6:
            return playerRowAvatar.isBot() ? playerRowBotAvatarWhiteTextureRegion : playerRowAvatarWhiteTextureRegion;
        case 7:
            return playerRowAvatar.isBot() ? playerRowBotAvatarYellowTextureRegion : playerRowAvatarYellowTextureRegion;
        default:
            break;
    }
    
    // Default, but should never get this far...
    std::cout << "getPlayerRowAvatarTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getPlayerRowPlatformAvatarTextureRegion(PlayerRowPlatformAvatar &playerRowPlatformAvatar)
{
    static TextureRegion platformAndroidTextureRegion = TextureRegion(INTERFACE_2_PLAYER_PLATFORM_AVATAR_ANDROID_TEXTURE_REGION_X, INTERFACE_2_PLAYER_PLATFORM_AVATAR_ANDROID_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_PLATFORM_AVATAR_ANDROID_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_PLATFORM_AVATAR_ANDROID_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion platformIOSTextureRegion = TextureRegion(INTERFACE_2_PLAYER_PLATFORM_AVATAR_IOS_TEXTURE_REGION_X, INTERFACE_2_PLAYER_PLATFORM_AVATAR_IOS_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_PLATFORM_AVATAR_IOS_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_PLATFORM_AVATAR_IOS_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion platformWP8TextureRegion = TextureRegion(INTERFACE_2_PLAYER_PLATFORM_AVATAR_WP8_TEXTURE_REGION_X, INTERFACE_2_PLAYER_PLATFORM_AVATAR_WP8_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_PLATFORM_AVATAR_WP8_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_PLATFORM_AVATAR_WP8_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (playerRowPlatformAvatar.getPlayerPlatform())
    {
        case PLATFORM_ANDROID:
            return platformAndroidTextureRegion;
        case PLATFORM_IOS:
            return platformIOSTextureRegion;
        case PLATFORM_WINDOWS_PHONE:
            return platformWP8TextureRegion;
        case PLATFORM_UNKNOWN:
        default:
            break;
    }
    
    // Default, but should never get this far...
    std::cout << "getPlayerRowPlatformAvatarTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getInterfaceOverlayTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(INTERFACE_OVERLAY_TEXTURE_REGION_X, INTERFACE_OVERLAY_TEXTURE_REGION_Y, INTERFACE_OVERLAY_TEXTURE_REGION_WIDTH, INTERFACE_OVERLAY_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getSpectatorInterfaceOverlayTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(INTERFACE_OVERLAY_SPECTATOR_TEXTURE_REGION_X, INTERFACE_OVERLAY_SPECTATOR_TEXTURE_REGION_Y, INTERFACE_OVERLAY_SPECTATOR_TEXTURE_REGION_WIDTH, INTERFACE_OVERLAY_SPECTATOR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getPlayerAvatarTextureRegion(PlayerAvatar &playerAvatar)
{
    static TextureRegion TR_INTERFACE_BOT_AVATAR_BLACK_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_BLACK_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_BLACK_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_BLACK_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_BLACK_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_BLACK_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_BLUE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_BLUE_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_BLUE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_BLUE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_BLUE_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_BLUE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_GREEN_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_GREEN_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_GREEN_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_GREEN_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_GREEN_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_GREEN_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_ORANGE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_ORANGE_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_ORANGE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_ORANGE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_ORANGE_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_ORANGE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_PINK_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_PINK_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_PINK_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_PINK_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_PINK_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_PINK_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_RED_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_RED_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_RED_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_RED_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_RED_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_RED_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_WHITE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_WHITE_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_WHITE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_WHITE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_WHITE_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_WHITE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_YELLOW_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_YELLOW_ALIVE_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_YELLOW_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_BOT_AVATAR_YELLOW_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_BOT_AVATAR_YELLOW_DEAD_TEXTURE_REGION_X, INTERFACE_BOT_AVATAR_YELLOW_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_BLACK_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_BLACK_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_BLACK_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_BLACK_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_BLACK_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_BLACK_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_BLUE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_BLUE_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_BLUE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_BLUE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_BLUE_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_BLUE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_GREEN_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_GREEN_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_GREEN_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_GREEN_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_GREEN_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_GREEN_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_ORANGE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_ORANGE_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_ORANGE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_ORANGE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_ORANGE_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_ORANGE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_PINK_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_PINK_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_PINK_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_PINK_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_PINK_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_PINK_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_RED_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_RED_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_RED_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_RED_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_RED_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_RED_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_WHITE_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_WHITE_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_WHITE_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_WHITE_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_WHITE_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_WHITE_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_YELLOW_ALIVE_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_YELLOW_ALIVE_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_YELLOW_ALIVE_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_INTERFACE_PLAYER_AVATAR_YELLOW_DEAD_TEXTURE_REGION = TextureRegion(INTERFACE_PLAYER_AVATAR_YELLOW_DEAD_TEXTURE_REGION_X, INTERFACE_PLAYER_AVATAR_YELLOW_DEAD_TEXTURE_REGION_Y, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    if(playerAvatar.isBot())
    {
        switch (playerAvatar.getPlayerIndex())
        {
            case 0:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_BLACK_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_BLACK_DEAD_TEXTURE_REGION;
            case 1:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_BLUE_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_BLUE_DEAD_TEXTURE_REGION;
            case 2:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_GREEN_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_GREEN_DEAD_TEXTURE_REGION;
            case 3:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_ORANGE_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_ORANGE_DEAD_TEXTURE_REGION;
            case 4:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_PINK_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_PINK_DEAD_TEXTURE_REGION;
            case 5:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_RED_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_RED_DEAD_TEXTURE_REGION;
            case 6:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_WHITE_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_WHITE_DEAD_TEXTURE_REGION;
            case 7:
            default:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_BOT_AVATAR_YELLOW_ALIVE_TEXTURE_REGION : TR_INTERFACE_BOT_AVATAR_YELLOW_DEAD_TEXTURE_REGION;
        }
    }
    else
    {
        switch (playerAvatar.getPlayerIndex())
        {
            case 0:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_BLACK_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_BLACK_DEAD_TEXTURE_REGION;
            case 1:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_BLUE_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_BLUE_DEAD_TEXTURE_REGION;
            case 2:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_GREEN_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_GREEN_DEAD_TEXTURE_REGION;
            case 3:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_ORANGE_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_ORANGE_DEAD_TEXTURE_REGION;
            case 4:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_PINK_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_PINK_DEAD_TEXTURE_REGION;
            case 5:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_RED_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_RED_DEAD_TEXTURE_REGION;
            case 6:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_WHITE_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_WHITE_DEAD_TEXTURE_REGION;
            case 7:
            default:
                return playerAvatar.getPlayerState() == ALIVE ? TR_INTERFACE_PLAYER_AVATAR_YELLOW_ALIVE_TEXTURE_REGION : TR_INTERFACE_PLAYER_AVATAR_YELLOW_DEAD_TEXTURE_REGION;
        }
    }
}

TextureRegion& Assets::getDPadControlTextureRegion(DPadControl &dpadControl)
{
    static TextureRegion TR_D_PAD_RIGHT_TEXTURE_REGION = TextureRegion(D_PAD_RIGHT_TEXTURE_REGION_X, D_PAD_RIGHT_TEXTURE_REGION_Y, D_PAD_RIGHT_TEXTURE_REGION_WIDTH, D_PAD_RIGHT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_D_PAD_UP_TEXTURE_REGION = TextureRegion(D_PAD_UP_TEXTURE_REGION_X, D_PAD_UP_TEXTURE_REGION_Y, D_PAD_UP_TEXTURE_REGION_WIDTH, D_PAD_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_D_PAD_LEFT_TEXTURE_REGION = TextureRegion(D_PAD_LEFT_TEXTURE_REGION_X, D_PAD_LEFT_TEXTURE_REGION_Y, D_PAD_LEFT_TEXTURE_REGION_WIDTH, D_PAD_LEFT_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_D_PAD_DOWN_TEXTURE_REGION = TextureRegion(D_PAD_DOWN_TEXTURE_REGION_X, D_PAD_DOWN_TEXTURE_REGION_Y, D_PAD_DOWN_TEXTURE_REGION_WIDTH, D_PAD_DOWN_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_D_PAD_NO_DIRECTION_TEXTURE_REGION = TextureRegion(D_PAD_NO_DIRECTION_TEXTURE_REGION_X, D_PAD_NO_DIRECTION_TEXTURE_REGION_Y, D_PAD_NO_DIRECTION_TEXTURE_REGION_WIDTH, D_PAD_NO_DIRECTION_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch(dpadControl.getState())
    {
        case RIGHT_ARROW:
            return TR_D_PAD_RIGHT_TEXTURE_REGION;
        case UP_ARROW:
            return TR_D_PAD_UP_TEXTURE_REGION;
        case LEFT_ARROW:
            return TR_D_PAD_LEFT_TEXTURE_REGION;
        case DOWN_ARROW:
            return TR_D_PAD_DOWN_TEXTURE_REGION;
        case NO_DIRECTION:
        default:
            return TR_D_PAD_NO_DIRECTION_TEXTURE_REGION;
    }
}

TextureRegion& Assets::getPlayerTextureRegion(PlayerDynamicGameObject &player)
{
    if (player.getPlayerState() == Player_State::ALIVE)
    {
        if(player.getPlayerActionState() == IDLE)
        {
            if (player.isMoving())
            {
                static std::vector<TextureRegion> playerRightTextureRegions;
                if (playerRightTextureRegions.size() == 0)
                {
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_1_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_2_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_3_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_4_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_5_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_6_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_7_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerRightTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_8_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                }
                
                static std::vector<TextureRegion> playerUpTextureRegions;
                if (playerUpTextureRegions.size() == 0)
                {
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_1_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_2_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_3_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_4_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_5_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_6_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_7_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerUpTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_8_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                }
                
                static std::vector<TextureRegion> playerLeftTextureRegions;
                if (playerLeftTextureRegions.size() == 0)
                {
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_1_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_2_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_3_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_4_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_5_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_6_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_7_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerLeftTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_8_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                }
                
                static std::vector<TextureRegion> playerDownTextureRegions;
                if (playerDownTextureRegions.size() == 0)
                {
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_1_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_2_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_3_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_4_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_5_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_6_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_7_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerDownTextureRegions.push_back(TextureRegion(PLAYER_WALK_FRAME_8_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                }
                
                static float cycleTime = 0.8f;
                static std::vector<float> playerFrames;
                if (playerFrames.size() == 0)
                {
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                    playerFrames.push_back(0.1f);
                }
                
                switch (player.getDirection())
                {
                    case DIRECTION_RIGHT:
                        return playerRightTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                    case DIRECTION_UP:
                        return playerUpTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                    case DIRECTION_LEFT:
                        return playerLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                    case DIRECTION_DOWN:
                    default:
                        return playerDownTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                }
            }
            else if(player.getStateTime() > 3)
            {
                static std::vector<TextureRegion> playerIdleTextureRegions;
                if (playerIdleTextureRegions.size() == 0)
                {
                    playerIdleTextureRegions.push_back(TextureRegion(PLAYER_IDLE_FRAME_1_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerIdleTextureRegions.push_back(TextureRegion(PLAYER_IDLE_FRAME_2_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerIdleTextureRegions.push_back(TextureRegion(PLAYER_IDLE_FRAME_3_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                    playerIdleTextureRegions.push_back(TextureRegion(PLAYER_IDLE_FRAME_4_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                }
                
                static float cycleTime = 0.8f;
                static std::vector<float> playerFrames;
                if (playerFrames.size() == 0)
                {
                    playerFrames.push_back(0.2f);
                    playerFrames.push_back(0.2f);
                    playerFrames.push_back(0.2f);
                    playerFrames.push_back(0.2f);
                }
                
                return playerIdleTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            }
            else
            {
                static TextureRegion playerRightIdleTextureRegion = TextureRegion(PLAYER_WALK_IDLE_TEXTURE_REGION_X, PLAYER_WALK_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
                static TextureRegion playerUpIdleTextureRegion = TextureRegion(PLAYER_WALK_IDLE_TEXTURE_REGION_X, PLAYER_WALK_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
                static TextureRegion playerLeftIdleTextureRegion = TextureRegion(PLAYER_WALK_IDLE_TEXTURE_REGION_X, PLAYER_WALK_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
                static TextureRegion playerDownIdleTextureRegion = TextureRegion(PLAYER_WALK_IDLE_TEXTURE_REGION_X, PLAYER_WALK_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
                
                switch (player.getDirection())
                {
                    case DIRECTION_RIGHT:
                        return playerRightIdleTextureRegion;
                    case DIRECTION_UP:
                        return playerUpIdleTextureRegion;
                    case DIRECTION_LEFT:
                        return playerLeftIdleTextureRegion;
                    case DIRECTION_DOWN:
                    default:
                        return playerDownIdleTextureRegion;
                }
            }
        }
        else if(player.getPlayerActionState() == CURSED)
        {
            static std::vector<TextureRegion> playerCursedTextureRegions;
            if (playerCursedTextureRegions.size() == 0)
            {
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_1_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_2_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_3_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_4_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_5_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_6_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_7_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerCursedTextureRegions.push_back(TextureRegion(PLAYER_CURSED_FRAME_8_TEXTURE_REGION_X, PLAYER_CURSED_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static float cycleTime = 0.8f;
            static std::vector<float> playerFrames;
            if (playerFrames.size() == 0)
            {
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
            }
            
            return playerCursedTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
        }
        else if(player.getPlayerActionState() == PLACING_BOMB)
        {
            static std::vector<TextureRegion> playerPlacingBombRightTextureRegions;
            if (playerPlacingBombRightTextureRegions.size() == 0)
            {
                playerPlacingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_RIGHT_FRAME_1_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_RIGHT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_RIGHT_FRAME_2_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_RIGHT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_RIGHT_FRAME_3_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_RIGHT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPlacingBombUpTextureRegions;
            if (playerPlacingBombUpTextureRegions.size() == 0)
            {
                playerPlacingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_UP_FRAME_1_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_UP_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_UP_FRAME_2_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_UP_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_UP_FRAME_3_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_UP_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPlacingBombLeftTextureRegions;
            if (playerPlacingBombLeftTextureRegions.size() == 0)
            {
                playerPlacingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_LEFT_FRAME_1_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_LEFT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_LEFT_FRAME_2_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_LEFT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_LEFT_FRAME_3_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_LEFT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPlacingBombDownTextureRegions;
            if (playerPlacingBombDownTextureRegions.size() == 0)
            {
                playerPlacingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_DOWN_FRAME_1_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_DOWN_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_DOWN_FRAME_2_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_DOWN_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPlacingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PLACE_BOMB_DOWN_FRAME_3_TEXTURE_REGION_X, PLAYER_PLACE_BOMB_DOWN_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static float cycleTime = 0.15f;
            static std::vector<float> playerFrames;
            if (playerFrames.size() == 0)
            {
                playerFrames.push_back(0.05f);
                playerFrames.push_back(0.05f);
                playerFrames.push_back(0.05f);
            }
            
            switch (player.getDirection())
            {
                case DIRECTION_RIGHT:
                    return playerPlacingBombRightTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_UP:
                    return playerPlacingBombUpTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_LEFT:
                    return playerPlacingBombLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_DOWN:
                default:
                    return playerPlacingBombDownTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            }
        }
        else if(player.getPlayerActionState() == PUSHING_BOMB)
        {
            static std::vector<TextureRegion> playerPushingBombRightTextureRegions;
            if (playerPushingBombRightTextureRegions.size() == 0)
            {
                playerPushingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_RIGHT_FRAME_1_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_RIGHT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_RIGHT_FRAME_2_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_RIGHT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombRightTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_RIGHT_FRAME_3_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_RIGHT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPushingBombUpTextureRegions;
            if (playerPushingBombUpTextureRegions.size() == 0)
            {
                playerPushingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_UP_FRAME_1_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_UP_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_UP_FRAME_2_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_UP_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombUpTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_UP_FRAME_3_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_UP_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPushingBombLeftTextureRegions;
            if (playerPushingBombLeftTextureRegions.size() == 0)
            {
                playerPushingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_LEFT_FRAME_1_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_LEFT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_LEFT_FRAME_2_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_LEFT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombLeftTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_LEFT_FRAME_3_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_LEFT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerPushingBombDownTextureRegions;
            if (playerPushingBombDownTextureRegions.size() == 0)
            {
                playerPushingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_DOWN_FRAME_1_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_DOWN_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_DOWN_FRAME_2_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_DOWN_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerPushingBombDownTextureRegions.push_back(TextureRegion(PLAYER_PUSH_BOMB_DOWN_FRAME_3_TEXTURE_REGION_X, PLAYER_PUSH_BOMB_DOWN_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static float cycleTime = 0.15f;
            static std::vector<float> playerFrames;
            if (playerFrames.size() == 0)
            {
                playerFrames.push_back(0.05f);
                playerFrames.push_back(0.05f);
                playerFrames.push_back(0.05f);
            }
            
            switch (player.getDirection())
            {
                case DIRECTION_RIGHT:
                    return playerPushingBombRightTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_UP:
                    return playerPushingBombUpTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_LEFT:
                    return playerPushingBombLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_DOWN:
                default:
                    return playerPushingBombDownTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            }
        }
        else if(player.getPlayerActionState() == RAISING_SHIELD)
        {
            static std::vector<TextureRegion> playerShieldRaiseRightTextureRegions;
            if (playerShieldRaiseRightTextureRegions.size() == 0)
            {
                playerShieldRaiseRightTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_RIGHT_FRAME_1_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_RIGHT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseRightTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_RIGHT_FRAME_2_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_RIGHT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseRightTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_RIGHT_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_RIGHT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerShieldRaiseUpTextureRegions;
            if (playerShieldRaiseUpTextureRegions.size() == 0)
            {
                playerShieldRaiseUpTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_UP_FRAME_1_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_UP_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseUpTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_UP_FRAME_2_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_UP_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseUpTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_UP_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_UP_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerShieldRaiseLeftTextureRegions;
            if (playerShieldRaiseLeftTextureRegions.size() == 0)
            {
                playerShieldRaiseLeftTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_LEFT_FRAME_1_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_LEFT_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseLeftTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_LEFT_FRAME_2_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_LEFT_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseLeftTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_LEFT_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_LEFT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static std::vector<TextureRegion> playerShieldRaiseDownTextureRegions;
            if (playerShieldRaiseDownTextureRegions.size() == 0)
            {
                playerShieldRaiseDownTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_DOWN_FRAME_1_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_DOWN_FRAME_1_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseDownTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_DOWN_FRAME_2_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_DOWN_FRAME_2_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerShieldRaiseDownTextureRegions.push_back(TextureRegion(PLAYER_RAISE_SHIELD_DOWN_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_DOWN_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static float cycleTime = 0.40f;
            static std::vector<float> playerFrames;
            if (playerFrames.size() == 0)
            {
                playerFrames.push_back(0.10f);
                playerFrames.push_back(0.10f);
                playerFrames.push_back(0.20f);
            }
            
            switch (player.getDirection())
            {
                case DIRECTION_RIGHT:
                    return playerShieldRaiseRightTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_UP:
                    return playerShieldRaiseUpTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_LEFT:
                    return playerShieldRaiseLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
                case DIRECTION_DOWN:
                default:
                    return playerShieldRaiseDownTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            }
        }
        else if(player.getPlayerActionState() == SHIELD_RAISED)
        {
            static TextureRegion playerRightShieldRaisedTextureRegion = TextureRegion(PLAYER_RAISE_SHIELD_RIGHT_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_RIGHT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
            static TextureRegion playerUpShieldRaisedTextureRegion = TextureRegion(PLAYER_RAISE_SHIELD_UP_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_UP_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
            static TextureRegion playerLeftShieldRaisedTextureRegion = TextureRegion(PLAYER_RAISE_SHIELD_LEFT_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_LEFT_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
            static TextureRegion playerDownShieldRaisedTextureRegion = TextureRegion(PLAYER_RAISE_SHIELD_DOWN_FRAME_3_TEXTURE_REGION_X, PLAYER_RAISE_SHIELD_DOWN_FRAME_3_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
            
            switch (player.getDirection())
            {
                case DIRECTION_RIGHT:
                    return playerRightShieldRaisedTextureRegion;
                case DIRECTION_UP:
                    return playerUpShieldRaisedTextureRegion;
                case DIRECTION_LEFT:
                    return playerLeftShieldRaisedTextureRegion;
                case DIRECTION_DOWN:
                default:
                    return playerDownShieldRaisedTextureRegion;
            }
        }
        else
        {
            static std::vector<TextureRegion> playerWinningTextureRegions;
            if (playerWinningTextureRegions.size() == 0)
            {
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_1_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_2_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_3_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_4_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_5_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
                playerWinningTextureRegions.push_back(TextureRegion(PLAYER_WINNING_FRAME_6_TEXTURE_REGION_X, PLAYER_IDLE_WINNING_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            }
            
            static float cycleTime = 0.6f;
            static std::vector<float> playerFrames;
            if (playerFrames.size() == 0)
            {
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
                playerFrames.push_back(0.1f);
            }
            
            static float cycleTimeForBot = 1.2f;
            static std::vector<float> botFrames;
            if (botFrames.size() == 0)
            {
                botFrames.push_back(0.2f);
                botFrames.push_back(0.2f);
                botFrames.push_back(0.2f);
                botFrames.push_back(0.2f);
                botFrames.push_back(0.2f);
                botFrames.push_back(0.2f);
            }
            
            return player.isBot() ? playerWinningTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTimeForBot, botFrames)) : playerWinningTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
        }
    }
    else if (player.getPlayerState() == Player_State::FALLING || player.getPlayerState() == Player_State::ABOUT_TO_FALL)
    {
        static TextureRegion playerFallingLeftTextureRegion = TextureRegion(PLAYER_DEATH_FRAME_1_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return playerFallingLeftTextureRegion;
    }
    else if (player.getPlayerState() == Player_State::FREEZING)
    {
        static std::vector<TextureRegion> playerFreezingLeftTextureRegions;
        if (playerFreezingLeftTextureRegions.size() == 0)
        {
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_1_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_2_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_3_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_4_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_5_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerFreezingLeftTextureRegions.push_back(TextureRegion(PLAYER_FREEZING_FRAME_6_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.6f;
        static std::vector<float> playerFrames;
        if (playerFrames.size() == 0)
        {
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
        }
        
        return playerFreezingLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
    }
    else if (player.getPlayerState() == Player_State::FROZEN)
    {
        static TextureRegion playerFrozenLeftTextureRegion = TextureRegion(PLAYER_FREEZING_FRAME_6_TEXTURE_REGION_X, PLAYER_FREEZING_FRAMES_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return playerFrozenLeftTextureRegion;
    }
    else
    {
        static std::vector<TextureRegion> playerDeathRightTextureRegions;
        if (playerDeathRightTextureRegions.size() == 0)
        {
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_1_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_2_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_3_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_4_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_5_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathRightTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_6_TEXTURE_REGION_X, PLAYER_DEATH_RIGHT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static std::vector<TextureRegion> playerDeathUpTextureRegions;
        if (playerDeathUpTextureRegions.size() == 0)
        {
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_1_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_2_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_3_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_4_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_5_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathUpTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_6_TEXTURE_REGION_X, PLAYER_DEATH_UP_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static std::vector<TextureRegion> playerDeathLeftTextureRegions;
        if (playerDeathLeftTextureRegions.size() == 0)
        {
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_1_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_2_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_3_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_4_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_5_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathLeftTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_6_TEXTURE_REGION_X, PLAYER_DEATH_LEFT_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static std::vector<TextureRegion> playerDeathDownTextureRegions;
        if (playerDeathDownTextureRegions.size() == 0)
        {
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_1_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_2_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_3_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_4_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_5_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            playerDeathDownTextureRegions.push_back(TextureRegion(PLAYER_DEATH_FRAME_6_TEXTURE_REGION_X, PLAYER_DEATH_DOWN_TEXTURE_REGION_Y, PLAYER_TEXTURE_REGION_WIDTH, PLAYER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }

        static float cycleTime = 0.6f;
        static std::vector<float> playerFrames;
        if (playerFrames.size() == 0)
        {
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
            playerFrames.push_back(0.1f);
        }
        
        switch (player.getDirection())
        {
            case DIRECTION_RIGHT:
                return playerDeathRightTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            case DIRECTION_UP:
                return playerDeathUpTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            case DIRECTION_LEFT:
                return playerDeathLeftTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
            case DIRECTION_DOWN:
            default:
                return playerDeathDownTextureRegions.at(getKeyFrameNumber(player.getStateTime(), cycleTime, playerFrames));
        }
    }
}

TextureRegion& Assets::getBombTextureRegion(BombGameObject &bomb)
{
    static std::vector<TextureRegion> bombTextureRegions;
    if (bombTextureRegions.size() == 0)
    {
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_1_TEXTURE_REGION_X, BOMB_FRAME_1_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_2_TEXTURE_REGION_X, BOMB_FRAME_2_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_3_TEXTURE_REGION_X, BOMB_FRAME_3_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_4_TEXTURE_REGION_X, BOMB_FRAME_4_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_5_TEXTURE_REGION_X, BOMB_FRAME_5_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_6_TEXTURE_REGION_X, BOMB_FRAME_6_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombTextureRegions.push_back(TextureRegion(BOMB_FRAME_7_TEXTURE_REGION_X, BOMB_FRAME_7_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> bombExplodingTextureRegions;
    if (bombExplodingTextureRegions.size() == 0)
    {
        bombExplodingTextureRegions.push_back(TextureRegion(BOMB_EXPLOSION_FRAME_1_TEXTURE_REGION_X, BOMB_EXPLOSION_FRAME_1_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        bombExplodingTextureRegions.push_back(TextureRegion(BOMB_EXPLOSION_FRAME_2_TEXTURE_REGION_X, BOMB_EXPLOSION_FRAME_2_TEXTURE_REGION_Y, BOMB_TEXTURE_REGION_WIDTH, BOMB_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }

    static float cycleTime = 3.00f;
    static std::vector<float> bombFrames;
    if (bombFrames.size() == 0)
    {
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
        bombFrames.push_back(0.42857142857143f);
    }
    
    static float bombExplodingCycleTime = 0.2f;
    static std::vector<float> bombExplodingFrames;
    if (bombExplodingFrames.size() == 0)
    {
        bombExplodingFrames.push_back(0.1f);
        bombExplodingFrames.push_back(0.1f);
    }
    
    if(bomb.isExploding())
    {
        return bombExplodingTextureRegions.at(getKeyFrameNumber(bomb.getStateTime(), bombExplodingCycleTime, bombExplodingFrames));
    }
    else
    {
        return bombTextureRegions.at(getKeyFrameNumber(bomb.getStateTime(), cycleTime, bombFrames));
    }
}

TextureRegion& Assets::getPlayerNameBubbleTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(PLAYER_NAME_BUBBLE_TEXTURE_REGION_X, PLAYER_NAME_BUBBLE_TEXTURE_REGION_Y, PLAYER_NAME_BUBBLE_TEXTURE_REGION_WIDTH, PLAYER_NAME_BUBBLE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getPlayerPointerTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(SPECTATING_WHO_ARROW_TEXTURE_REGION_X, SPECTATING_WHO_ARROW_TEXTURE_REGION_Y, SPECTATING_WHO_ARROW_TEXTURE_REGION_WIDTH, SPECTATING_WHO_ARROW_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getSpectatorControlsTextureRegion(SpectatorControls &spectatorControls)
{
    static TextureRegion TR_LEFT_ARROW_HIGHLIGHTED = TextureRegion(SPECTATOR_CONTROLS_LEFT_ARROW_HIGHLIGHTED_TEXTURE_REGION_X, SPECTATOR_CONTROLS_LEFT_ARROW_HIGHLIGHTED_TEXTURE_REGION_Y, SPECTATOR_CONTROLS_TEXTURE_REGION_WIDTH, SPECTATOR_CONTROLS_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_RIGHT_ARROW_HIGHLIGHTED = TextureRegion(SPECTATOR_CONTROLS_RIGHT_ARROW_HIGHLIGHTED_TEXTURE_REGION_X, SPECTATOR_CONTROLS_RIGHT_ARROW_HIGHLIGHTED_TEXTURE_REGION_Y, SPECTATOR_CONTROLS_TEXTURE_REGION_WIDTH, SPECTATOR_CONTROLS_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_NOTHING_HIGHLIGHTED = TextureRegion(SPECTATOR_CONTROLS_NOTHING_HIGHLIGHTED_TEXTURE_REGION_X, SPECTATOR_CONTROLS_NOTHING_HIGHLIGHTED_TEXTURE_REGION_Y, SPECTATOR_CONTROLS_TEXTURE_REGION_WIDTH, SPECTATOR_CONTROLS_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch(spectatorControls.getState())
    {
        case LEFT_ARROW_HIGHLIGHTED:
            return TR_LEFT_ARROW_HIGHLIGHTED;
        case RIGHT_ARROW_HIGHLIGHTED:
            return TR_RIGHT_ARROW_HIGHLIGHTED;
        case NOTHING_HIGHLIGHTED:
        default:
            return TR_NOTHING_HIGHLIGHTED;
    }
}

TextureRegion& Assets::getCountDownNumberTextureRegion(CountDownNumberGameObject &countDownNumberGameObject)
{
    static TextureRegion display3TextureRegion = TextureRegion(COUNTDOWN_3_TEXTURE_REGION_X, COUNTDOWN_3_TEXTURE_REGION_Y, COUNTDOWN_3_TEXTURE_REGION_WIDTH, COUNTDOWN_3_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion display2TextureRegion = TextureRegion(COUNTDOWN_2_TEXTURE_REGION_X, COUNTDOWN_2_TEXTURE_REGION_Y, COUNTDOWN_2_TEXTURE_REGION_WIDTH, COUNTDOWN_2_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion display1TextureRegion = TextureRegion(COUNTDOWN_1_TEXTURE_REGION_X, COUNTDOWN_1_TEXTURE_REGION_Y, COUNTDOWN_1_TEXTURE_REGION_WIDTH, COUNTDOWN_1_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (countDownNumberGameObject.getType())
    {
        case DISPLAY_3:
            return display3TextureRegion;
        case DISPLAY_2:
            return display2TextureRegion;
        case DISPLAY_1:
        default:
            return display1TextureRegion;
    }
}

TextureRegion& Assets::getDisplayXMovingTextureRegion(DisplayXMovingGameObject &displayXMovingGameObject)
{
    if(displayXMovingGameObject.getType() == BATTLE)
    {
        static TextureRegion textureRegion = TextureRegion(BATTLE_TEXTURE_REGION_X, BATTLE_TEXTURE_REGION_Y, BATTLE_TEXTURE_REGION_WIDTH, BATTLE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        return textureRegion;
    }
    else
    {
        static TextureRegion textureRegion = TextureRegion(HURRY_UP_TEXTURE_REGION_X, HURRY_UP_TEXTURE_REGION_Y, HURRY_UP_TEXTURE_REGION_WIDTH, HURRY_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        return textureRegion;
    }
}

TextureRegion& Assets::getDisplayGameOverTextureRegion(DisplayGameOverGameObject &displayGameOverGameObject)
{
    static TextureRegion displayGameSetTextureRegion = TextureRegion(GAME_SET_TEXTURE_REGION_X, GAME_SET_TEXTURE_REGION_Y, GAME_SET_TEXTURE_REGION_WIDTH, GAME_SET_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion displayDrawTextureRegion = TextureRegion(DRAW_TEXTURE_REGION_X, DRAW_TEXTURE_REGION_Y, DRAW_TEXTURE_REGION_WIDTH, DRAW_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (displayGameOverGameObject.getType())
    {
        case GAME_SET:
            return displayGameSetTextureRegion;
        case DRAW:
        default:
            return displayDrawTextureRegion;
    }
}

TextureRegion& Assets::getFireTextureRegion(Fire &fire)
{
    static TextureRegion TR_CORE_PART_1 = TextureRegion(CORE_PART_1_TEXTURE_REGION_X, CORE_PART_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_2 = TextureRegion(CORE_PART_2_TEXTURE_REGION_X, CORE_PART_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_3 = TextureRegion(CORE_PART_3_TEXTURE_REGION_X, CORE_PART_3_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_4_POW_1 = TextureRegion(CORE_PART_4_POW_1_TEXTURE_REGION_X, CORE_PART_4_POW_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_4_POW_2 = TextureRegion(CORE_PART_4_POW_2_TEXTURE_REGION_X, CORE_PART_4_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_5_POW_2 = TextureRegion(CORE_PART_5_POW_2_TEXTURE_REGION_X, CORE_PART_5_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_PART_6_POW_2 = TextureRegion(CORE_PART_6_POW_2_TEXTURE_REGION_X, CORE_PART_6_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CORE_END = TextureRegion(CORE_END_TEXTURE_REGION_X, CORE_END_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_1 = TextureRegion(HEAD_PART_1_TEXTURE_REGION_X, HEAD_PART_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_2 = TextureRegion(HEAD_PART_2_TEXTURE_REGION_X, HEAD_PART_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_3 = TextureRegion(HEAD_PART_3_TEXTURE_REGION_X, HEAD_PART_3_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_4_POW_1 = TextureRegion(HEAD_PART_4_POW_1_TEXTURE_REGION_X, HEAD_PART_4_POW_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_4_POW_2 = TextureRegion(HEAD_PART_4_POW_2_TEXTURE_REGION_X, HEAD_PART_4_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_5_POW_2 = TextureRegion(HEAD_PART_5_POW_2_TEXTURE_REGION_X, HEAD_PART_5_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HEAD_PART_6_POW_2 = TextureRegion(HEAD_PART_6_POW_2_TEXTURE_REGION_X, HEAD_PART_6_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_1 = TextureRegion(EDGE_FROM_CORE_PART_1_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_2 = TextureRegion(EDGE_FROM_CORE_PART_2_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_3 = TextureRegion(EDGE_FROM_CORE_PART_3_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_3_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_4_POW_1 = TextureRegion(EDGE_FROM_CORE_PART_4_POW_1_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_4_POW_1_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_4_POW_2 = TextureRegion(EDGE_FROM_CORE_PART_4_POW_2_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_4_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_CORE_PART_5_POW_2 = TextureRegion(EDGE_FROM_CORE_PART_5_POW_2_TEXTURE_REGION_X, EDGE_FROM_CORE_PART_5_POW_2_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_FAT_NECK = TextureRegion(EDGE_FROM_FAT_NECK_TEXTURE_REGION_X, EDGE_FROM_FAT_NECK_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_EDGE_FROM_THIN_NECK = TextureRegion(EDGE_FROM_THIN_NECK_TEXTURE_REGION_X, EDGE_FROM_THIN_NECK_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_FAT_NECK = TextureRegion(FAT_NECK_TEXTURE_REGION_X, FAT_NECK_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_THIN_NECK = TextureRegion(THIN_NECK_TEXTURE_REGION_X, THIN_NECK_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_BODY = TextureRegion(BODY_TEXTURE_REGION_X, BODY_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_NECK_AND_BODY_END = TextureRegion(NECK_AND_BODY_END_TEXTURE_REGION_X, NECK_AND_BODY_END_TEXTURE_REGION_Y, FIRE_TEXTURE_REGION_WIDTH, FIRE_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (fire.getFireType())
    {
        case CORE_PART_1:
            return TR_CORE_PART_1;
        case CORE_PART_2:
            return TR_CORE_PART_2;
        case CORE_PART_3:
            return TR_CORE_PART_3;
        case CORE_PART_4_POW_1:
            return TR_CORE_PART_4_POW_1;
        case CORE_PART_4_POW_2:
            return TR_CORE_PART_4_POW_2;
        case CORE_PART_5_POW_2:
            return TR_CORE_PART_5_POW_2;
        case CORE_PART_6_POW_2:
            return TR_CORE_PART_6_POW_2;
        case CORE_END:
            return TR_CORE_END;
        case HEAD_PART_1:
            return TR_HEAD_PART_1;
        case HEAD_PART_2:
            return TR_HEAD_PART_2;
        case HEAD_PART_3:
            return TR_HEAD_PART_3;
        case HEAD_PART_4_POW_1:
            return TR_HEAD_PART_4_POW_1;
        case HEAD_PART_4_POW_2:
            return TR_HEAD_PART_4_POW_2;
        case HEAD_PART_5_POW_2:
            return TR_HEAD_PART_5_POW_2;
        case HEAD_PART_6_POW_2:
            return TR_HEAD_PART_6_POW_2;
        case EDGE_FROM_CORE_PART_1:
            return TR_EDGE_FROM_CORE_PART_1;
        case EDGE_FROM_CORE_PART_2:
            return TR_EDGE_FROM_CORE_PART_2;
        case EDGE_FROM_CORE_PART_3:
            return TR_EDGE_FROM_CORE_PART_3;
        case EDGE_FROM_CORE_PART_4_POW_1:
            return TR_EDGE_FROM_CORE_PART_4_POW_1;
        case EDGE_FROM_CORE_PART_4_POW_2:
            return TR_EDGE_FROM_CORE_PART_4_POW_2;
        case EDGE_FROM_CORE_PART_5_POW_2:
            return TR_EDGE_FROM_CORE_PART_5_POW_2;
        case EDGE_FROM_FAT_NECK:
            return TR_EDGE_FROM_FAT_NECK;
        case EDGE_FROM_THIN_NECK:
            return TR_EDGE_FROM_THIN_NECK;
        case FAT_NECK:
            return TR_FAT_NECK;
        case THIN_NECK:
            return TR_THIN_NECK;
        case BODY:
            return TR_BODY;
        case NECK_AND_BODY_END:
        default:
            return TR_NECK_AND_BODY_END;
    }
}

TextureRegion& Assets::getForceFieldTextureRegion(int forceFieldState, float forceFieldStateTime)
{
    static std::vector<TextureRegion> forceFieldStateTurningOnTextureRegions;
    if (forceFieldStateTurningOnTextureRegions.size() == 0)
    {
        forceFieldStateTurningOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_STARTING_FRAME_1_TEXTURE_REGION_X, FORCE_FIELD_STARTING_FRAME_1_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateTurningOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_STARTING_FRAME_2_TEXTURE_REGION_X, FORCE_FIELD_STARTING_FRAME_2_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateTurningOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_STARTING_FRAME_3_TEXTURE_REGION_X, FORCE_FIELD_STARTING_FRAME_3_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateTurningOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_STARTING_FRAME_4_TEXTURE_REGION_X, FORCE_FIELD_STARTING_FRAME_4_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateTurningOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_STARTING_FRAME_5_TEXTURE_REGION_X, FORCE_FIELD_STARTING_FRAME_5_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float forceFieldStateTurningOnCycleTime = 0.50f;
    static std::vector<float> forceFieldStateTurningOnFrames;
    if (forceFieldStateTurningOnFrames.size() == 0)
    {
        forceFieldStateTurningOnFrames.push_back(0.1f);
        forceFieldStateTurningOnFrames.push_back(0.1f);
        forceFieldStateTurningOnFrames.push_back(0.1f);
        forceFieldStateTurningOnFrames.push_back(0.1f);
        forceFieldStateTurningOnFrames.push_back(0.1f);
    }
    
    static std::vector<TextureRegion> forceFieldStateOnTextureRegions;
    if (forceFieldStateOnTextureRegions.size() == 0)
    {
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_1_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_1_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_2_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_2_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_3_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_3_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_4_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_4_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_5_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_5_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_6_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_6_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateOnTextureRegions.push_back(TextureRegion(FORCE_FIELD_ACTIVE_FRAME_7_TEXTURE_REGION_X, FORCE_FIELD_ACTIVE_FRAME_7_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float forceFieldStateOnCycleTime = 0.70f;
    static std::vector<float> forceFieldStateOnFrames;
    if (forceFieldStateOnFrames.size() == 0)
    {
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
        forceFieldStateOnFrames.push_back(0.1f);
    }
    
    static std::vector<TextureRegion> forceFieldStateBreakingDownTextureRegions;
    if (forceFieldStateBreakingDownTextureRegions.size() == 0)
    {
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_1_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_1_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_2_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_2_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_3_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_3_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_4_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_4_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_5_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_5_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_6_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_6_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        forceFieldStateBreakingDownTextureRegions.push_back(TextureRegion(FORCE_FIELD_BREAKING_FRAME_7_TEXTURE_REGION_X, FORCE_FIELD_BREAKING_FRAME_7_TEXTURE_REGION_Y, FORCE_FIELD_TEXTURE_REGION_WIDTH, FORCE_FIELD_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float forceFieldStateBreakingDownCycleTime = 0.70f;
    static std::vector<float> forceFieldStateBreakingDownFrames;
    if (forceFieldStateBreakingDownFrames.size() == 0)
    {
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
        forceFieldStateBreakingDownFrames.push_back(0.1f);
    }
    
    switch (forceFieldState)
    {
        case PLAYER_FORCE_FIELD_STATE_TURNING_ON:
            return forceFieldStateTurningOnTextureRegions.at(getKeyFrameNumber(forceFieldStateTime, forceFieldStateTurningOnCycleTime, forceFieldStateTurningOnFrames));
        case PLAYER_FORCE_FIELD_STATE_ON:
            return forceFieldStateOnTextureRegions.at(getKeyFrameNumber(forceFieldStateTime, forceFieldStateOnCycleTime, forceFieldStateOnFrames));
        case PLAYER_FORCE_FIELD_STATE_BREAKING_DOWN:
            return forceFieldStateBreakingDownTextureRegions.at(getKeyFrameNumber(forceFieldStateTime, forceFieldStateBreakingDownCycleTime, forceFieldStateBreakingDownFrames));
        case PLAYER_FORCE_FIELD_STATE_OFF:
        default:
            break;
    }
    
    // Default, but should never get this far...
    std::cout << "getForceFieldTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getFallingObjectShadowTextureRegion(FallingObjectShadow &fallingObjectShadow)
{
    static TextureRegion TR_FARTHEST = TextureRegion(FALLING_OBJECT_SHADOW_FRAME_1_TEXTURE_REGION_X, FALLING_OBJECT_SHADOW_FRAMES_TEXTURE_REGION_Y, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_WIDTH, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
	static TextureRegion TR_FARTHER = TextureRegion(FALLING_OBJECT_SHADOW_FRAME_2_TEXTURE_REGION_X, FALLING_OBJECT_SHADOW_FRAMES_TEXTURE_REGION_Y, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_WIDTH, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HALFWAY = TextureRegion(FALLING_OBJECT_SHADOW_FRAME_3_TEXTURE_REGION_X, FALLING_OBJECT_SHADOW_FRAMES_TEXTURE_REGION_Y, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_WIDTH, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CLOSER = TextureRegion(FALLING_OBJECT_SHADOW_FRAME_4_TEXTURE_REGION_X, FALLING_OBJECT_SHADOW_FRAMES_TEXTURE_REGION_Y, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_WIDTH, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CLOSEST = TextureRegion(FALLING_OBJECT_SHADOW_FRAME_5_TEXTURE_REGION_X, FALLING_OBJECT_SHADOW_FRAMES_TEXTURE_REGION_Y, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_WIDTH, FALLING_OBJECT_SHADOW_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (fallingObjectShadow.getFallingObjectShadowState())
    {
        case FARTHEST:
            return TR_FARTHEST;
		case FARTHER:
			return TR_FARTHER;
        case HALFWAY:
            return TR_HALFWAY;
        case CLOSER:
            return TR_CLOSER;
        case CLOSEST:
        default:
            return TR_CLOSEST;
    }
}

TextureRegion& Assets::getCraterTextureRegion()
{
    static TextureRegion textureRegion = TextureRegion(CRATER_TEXTURE_REGION_X, CRATER_TEXTURE_REGION_Y, CRATER_TEXTURE_REGION_WIDTH, CRATER_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    return textureRegion;
}

TextureRegion& Assets::getFireBallTextureRegion(FireBall &fireBall)
{
    if(fireBall.isTargetReached())
    {
        static std::vector<TextureRegion> explosionTextureRegions;
        if (explosionTextureRegions.size() == 0)
        {
            explosionTextureRegions.push_back(TextureRegion(IMPACTING_FIRE_FRAME_1_TEXTURE_REGION_X, IMPACTING_FIRE_FRAME_1_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            explosionTextureRegions.push_back(TextureRegion(IMPACTING_FIRE_FRAME_2_TEXTURE_REGION_X, IMPACTING_FIRE_FRAME_2_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            explosionTextureRegions.push_back(TextureRegion(IMPACTING_FIRE_FRAME_3_TEXTURE_REGION_X, IMPACTING_FIRE_FRAME_3_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            explosionTextureRegions.push_back(TextureRegion(IMPACTING_FIRE_FRAME_4_TEXTURE_REGION_X, IMPACTING_FIRE_FRAME_4_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            explosionTextureRegions.push_back(TextureRegion(IMPACTING_FIRE_FRAME_5_TEXTURE_REGION_X, IMPACTING_FIRE_FRAME_5_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.6f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.2f);
        }
        
        return explosionTextureRegions.at(getKeyFrameNumber(fireBall.getStateTime(), cycleTime, frames));
    }
    else
    {
        static std::vector<TextureRegion> fireBallTextureRegions;
        if (fireBallTextureRegions.size() == 0)
        {
            fireBallTextureRegions.push_back(TextureRegion(FALLING_FIRE_FRAME_1_TEXTURE_REGION_X, FALLING_FIRE_FRAME_1_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            fireBallTextureRegions.push_back(TextureRegion(FALLING_FIRE_FRAME_2_TEXTURE_REGION_X, FALLING_FIRE_FRAME_2_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            fireBallTextureRegions.push_back(TextureRegion(FALLING_FIRE_FRAME_3_TEXTURE_REGION_X, FALLING_FIRE_FRAME_3_TEXTURE_REGION_Y, FALLING_FIRE_FRAME_TEXTURE_REGION_WIDTH, FALLING_FIRE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float cycleTime = 0.4f;
        static std::vector<float> frames;
        if (frames.size() == 0)
        {
            frames.push_back(0.1f);
            frames.push_back(0.1f);
            frames.push_back(0.2f);
        }
        
        return fireBallTextureRegions.at(getKeyFrameNumber(fireBall.getStateTime(), cycleTime, frames));
    }
}

TextureRegion& Assets::getIceBallTextureRegion(IceBall &iceBall)
{
    static std::vector<TextureRegion> iceBallTextureRegions;
    if (iceBallTextureRegions.size() == 0)
    {
        iceBallTextureRegions.push_back(TextureRegion(FALLING_ICE_FRAME_1_TEXTURE_REGION_X, FALLING_ICE_FRAMES_TEXTURE_REGION_Y, FALLING_ICE_FRAME_TEXTURE_REGION_WIDTH, FALLING_ICE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        iceBallTextureRegions.push_back(TextureRegion(FALLING_ICE_FRAME_2_TEXTURE_REGION_X, FALLING_ICE_FRAMES_TEXTURE_REGION_Y, FALLING_ICE_FRAME_TEXTURE_REGION_WIDTH, FALLING_ICE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        iceBallTextureRegions.push_back(TextureRegion(FALLING_ICE_FRAME_3_TEXTURE_REGION_X, FALLING_ICE_FRAMES_TEXTURE_REGION_Y, FALLING_ICE_FRAME_TEXTURE_REGION_WIDTH, FALLING_ICE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        iceBallTextureRegions.push_back(TextureRegion(FALLING_ICE_FRAME_4_TEXTURE_REGION_X, FALLING_ICE_FRAMES_TEXTURE_REGION_Y, FALLING_ICE_FRAME_TEXTURE_REGION_WIDTH, FALLING_ICE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        iceBallTextureRegions.push_back(TextureRegion(FALLING_ICE_FRAME_5_TEXTURE_REGION_X, FALLING_ICE_FRAMES_TEXTURE_REGION_Y, FALLING_ICE_FRAME_TEXTURE_REGION_WIDTH, FALLING_ICE_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float iceBallCycleTime = 0.5f;
    static std::vector<float> iceBallFrames;
    if (iceBallFrames.size() == 0)
    {
        iceBallFrames.push_back(0.1f);
        iceBallFrames.push_back(0.1f);
        iceBallFrames.push_back(0.1f);
        iceBallFrames.push_back(0.1f);
        iceBallFrames.push_back(0.1f);
    }
    
    return iceBallTextureRegions.at(getKeyFrameNumber(iceBall.getStateTime(), iceBallCycleTime, iceBallFrames));
}

TextureRegion& Assets::getIcePatchTextureRegion(IcePatch &icePatch)
{
    if(icePatch.getStateTime() > 0.6f)
    {
        static TextureRegion icePatchTr = TextureRegion(ICE_PATCH_FRAME_6_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        return icePatchTr;
    }
    else
    {
        static std::vector<TextureRegion> icePatchTextureRegions;
        if (icePatchTextureRegions.size() == 0)
        {
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_1_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_2_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_3_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_4_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_5_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
            icePatchTextureRegions.push_back(TextureRegion(ICE_PATCH_FRAME_6_TEXTURE_REGION_X, ICE_PATCH_FRAMES_TEXTURE_REGION_Y, ICE_PATCH_FRAME_TEXTURE_REGION_WIDTH, ICE_PATCH_FRAME_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        }
        
        static float icePatchCycleTime = 0.7f;
        static std::vector<float> icePatchFrames;
        if (icePatchFrames.size() == 0)
        {
            icePatchFrames.push_back(0.1f);
            icePatchFrames.push_back(0.1f);
            icePatchFrames.push_back(0.1f);
            icePatchFrames.push_back(0.1f);
            icePatchFrames.push_back(0.1f);
            icePatchFrames.push_back(0.2f);
        }
        
        return icePatchTextureRegions.at(getKeyFrameNumber(icePatch.getStateTime(), icePatchCycleTime, icePatchFrames));
    }
}

TextureRegion& Assets::getPowerUpBarItemTextureRegion(PowerUpBarItem &powerUpBarItem, float powerUpBarItemsStateTime)
{
    static std::vector<TextureRegion> powerUpBombTextureRegions;
    if (powerUpBombTextureRegions.size() == 0)
    {
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_1_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_2_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_3_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_4_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_5_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_6_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_7_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_8_TEXTURE_REGION_X, POWER_UP_ICON_BOMB_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpFireTextureRegions;
    if (powerUpFireTextureRegions.size() == 0)
    {
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_1_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_2_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_3_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_4_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_5_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_6_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_7_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_8_TEXTURE_REGION_X, POWER_UP_ICON_FIRE_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpSpeedTextureRegions;
    if (powerUpSpeedTextureRegions.size() == 0)
    {
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_1_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_2_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_3_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_4_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_5_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_6_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_7_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_ICON_FRAME_8_TEXTURE_REGION_X, POWER_UP_ICON_SPEED_TEXTURE_REGION_Y, POWER_UP_ICON_TEXTURE_REGION_WIDTH, POWER_UP_ICON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float cycleTime = 1.60f;
    static std::vector<float> frames;
    if (frames.size() == 0)
    {
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
        frames.push_back(0.2f);
    }
    
    switch (powerUpBarItem.getPowerUpType())
    {
        case POWER_UP_TYPE_FIRE:
            return powerUpFireTextureRegions.at(getKeyFrameNumber(powerUpBarItemsStateTime, cycleTime, frames));
        case POWER_UP_TYPE_SPEED:
            return powerUpSpeedTextureRegions.at(getKeyFrameNumber(powerUpBarItemsStateTime, cycleTime, frames));
        case POWER_UP_TYPE_BOMB:
        case POWER_UP_TYPE_NONE:
        default:
            return powerUpBombTextureRegions.at(getKeyFrameNumber(powerUpBarItemsStateTime, cycleTime, frames));
    }
}

TextureRegion& Assets::getActiveButtonTextureRegion(ActiveButton &activeButton, float buttonsStateTime)
{
    if(activeButton.getPowerUpType() == POWER_UP_TYPE_PUSH)
    {
        static TextureRegion TR_BUTTON_PUSH_ENABLED_TEXTURE_REGION = TextureRegion(BUTTON_PUSH_ENABLED_TEXTURE_REGION_X, BUTTON_PUSH_ENABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_PUSH_HIGHLIGHTED_TEXTURE_REGION = TextureRegion(BUTTON_PUSH_HIGHLIGHTED_TEXTURE_REGION_X, BUTTON_PUSH_HIGHLIGHTED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_PUSH_PRESSED_TEXTURE_REGION = TextureRegion(BUTTON_PUSH_PRESSED_TEXTURE_REGION_X, BUTTON_PUSH_PRESSED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_PUSH_DISABLED_TEXTURE_REGION = TextureRegion(BUTTON_PUSH_DISABLED_TEXTURE_REGION_X, BUTTON_PUSH_DISABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        if (activeButton.getButtonState() == ENABLED)
        {
            if(activeButton.isPressed())
            {
                return TR_BUTTON_PUSH_PRESSED_TEXTURE_REGION;
            }
            else
            {
                static std::vector<TextureRegion> activeButtonEnabledTextureRegions;
                if (activeButtonEnabledTextureRegions.size() == 0)
                {
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_PUSH_ENABLED_TEXTURE_REGION);
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_PUSH_HIGHLIGHTED_TEXTURE_REGION);
                }
                
                static float cycleTime = 1.00f;
                static std::vector<float> frames;
                if (frames.size() == 0)
                {
                    frames.push_back(0.7f);
                    frames.push_back(0.3f);
                }
                
                return activeButtonEnabledTextureRegions.at(getKeyFrameNumber(buttonsStateTime, cycleTime, frames));
            }
        }
        else
        {
            return TR_BUTTON_PUSH_DISABLED_TEXTURE_REGION;
        }
    }
    else if(activeButton.getPowerUpType() == POWER_UP_TYPE_SHIELD)
    {
        static TextureRegion TR_BUTTON_SHIELD_ENABLED_TEXTURE_REGION = TextureRegion(BUTTON_SHIELD_ENABLED_TEXTURE_REGION_X, BUTTON_SHIELD_ENABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_SHIELD_HIGHLIGHTED_TEXTURE_REGION = TextureRegion(BUTTON_SHIELD_HIGHLIGHTED_TEXTURE_REGION_X, BUTTON_SHIELD_HIGHLIGHTED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_SHIELD_PRESSED_TEXTURE_REGION = TextureRegion(BUTTON_SHIELD_PRESSED_TEXTURE_REGION_X, BUTTON_SHIELD_PRESSED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_SHIELD_DISABLED_TEXTURE_REGION = TextureRegion(BUTTON_SHIELD_DISABLED_TEXTURE_REGION_X, BUTTON_SHIELD_DISABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        if (activeButton.getButtonState() == ENABLED)
        {
            if(activeButton.isPressed())
            {
                return TR_BUTTON_SHIELD_PRESSED_TEXTURE_REGION;
            }
            else
            {
                static std::vector<TextureRegion> activeButtonEnabledTextureRegions;
                if (activeButtonEnabledTextureRegions.size() == 0)
                {
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_SHIELD_ENABLED_TEXTURE_REGION);
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_SHIELD_HIGHLIGHTED_TEXTURE_REGION);
                }
                
                static float cycleTime = 1.00f;
                static std::vector<float> frames;
                if (frames.size() == 0)
                {
                    frames.push_back(0.7f);
                    frames.push_back(0.3f);
                }
                
                return activeButtonEnabledTextureRegions.at(getKeyFrameNumber(buttonsStateTime, cycleTime, frames));
            }
        }
        else
        {
            return TR_BUTTON_SHIELD_DISABLED_TEXTURE_REGION;
        }
    }
    else if(activeButton.getPowerUpType() == POWER_UP_TYPE_LAND_MINE)
    {
        static TextureRegion TR_BUTTON_LM_ENABLED_TEXTURE_REGION = TextureRegion(BUTTON_LAND_MINE_DISABLED_TEXTURE_REGION_X, BUTTON_LAND_MINE_ENABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_LM_HIGHLIGHTED_TEXTURE_REGION = TextureRegion(BUTTON_LAND_MINE_HIGHLIGHTED_TEXTURE_REGION_X, BUTTON_LAND_MINE_HIGHLIGHTED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_LM_PRESSED_TEXTURE_REGION = TextureRegion(BUTTON_LAND_MINE_PRESSED_TEXTURE_REGION_X, BUTTON_LAND_MINE_PRESSED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        static TextureRegion TR_BUTTON_LM_DISABLED_TEXTURE_REGION = TextureRegion(BUTTON_LAND_MINE_DISABLED_TEXTURE_REGION_X, BUTTON_LAND_MINE_DISABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
        
        if (activeButton.getButtonState() == ENABLED)
        {
            if(activeButton.isPressed())
            {
                return TR_BUTTON_LM_PRESSED_TEXTURE_REGION;
            }
            else
            {
                static std::vector<TextureRegion> activeButtonEnabledTextureRegions;
                if (activeButtonEnabledTextureRegions.size() == 0)
                {
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_LM_ENABLED_TEXTURE_REGION);
                    activeButtonEnabledTextureRegions.push_back(TR_BUTTON_LM_HIGHLIGHTED_TEXTURE_REGION);
                }
                
                static float cycleTime = 1.00f;
                static std::vector<float> frames;
                if (frames.size() == 0)
                {
                    frames.push_back(0.7f);
                    frames.push_back(0.3f);
                }
                
                return activeButtonEnabledTextureRegions.at(getKeyFrameNumber(buttonsStateTime, cycleTime, frames));
            }
        }
        else
        {
            return TR_BUTTON_LM_DISABLED_TEXTURE_REGION;
        }
    }
    
    // Default, but should never get this far...
    std::cout << "getActiveButtonTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getBombButtonTextureRegion(BombButton &bombButton, float buttonsStateTime)
{
    static TextureRegion TR_BUTTON_BOMB_ENABLED_TEXTURE_REGION = TextureRegion(BUTTON_BOMB_ENABLED_TEXTURE_REGION_X, BUTTON_BOMB_ENABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_BUTTON_BOMB_HIGHLIGHTED_TEXTURE_REGION = TextureRegion(BUTTON_BOMB_HIGHLIGHTED_TEXTURE_REGION_X, BUTTON_BOMB_HIGHLIGHTED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_BUTTON_BOMB_PRESSED_TEXTURE_REGION = TextureRegion(BUTTON_BOMB_PRESSED_TEXTURE_REGION_X, BUTTON_BOMB_PRESSED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_BUTTON_BOMB_DISABLED_TEXTURE_REGION = TextureRegion(BUTTON_BOMB_DISABLED_TEXTURE_REGION_X, BUTTON_BOMB_DISABLED_TEXTURE_REGION_Y, BUTTON_TEXTURE_REGION_WIDTH, BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    if (bombButton.getButtonState() == ENABLED)
    {
        if(bombButton.isPressed())
        {
            return TR_BUTTON_BOMB_PRESSED_TEXTURE_REGION;
        }
        else
        {
            static std::vector<TextureRegion> bombButtonEnabledTextureRegions;
            if (bombButtonEnabledTextureRegions.size() == 0)
            {
                bombButtonEnabledTextureRegions.push_back(TR_BUTTON_BOMB_ENABLED_TEXTURE_REGION);
                bombButtonEnabledTextureRegions.push_back(TR_BUTTON_BOMB_HIGHLIGHTED_TEXTURE_REGION);
            }
            
            static float cycleTime = 1.00f;
            static std::vector<float> frames;
            if (frames.size() == 0)
            {
                frames.push_back(0.7f);
                frames.push_back(0.3f);
            }
            
            return bombButtonEnabledTextureRegions.at(getKeyFrameNumber(buttonsStateTime, cycleTime, frames));
        }
    }
    else
    {
        return TR_BUTTON_BOMB_DISABLED_TEXTURE_REGION;
    }
}

TextureRegion& Assets::getPowerUpTextureRegion(PowerUp &powerUp)
{
    static std::vector<TextureRegion> powerUpBombTextureRegions;
    if (powerUpBombTextureRegions.size() == 0)
    {
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpFireTextureRegions;
    if (powerUpFireTextureRegions.size() == 0)
    {
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpFireTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpForceFieldTextureRegions;
    if (powerUpForceFieldTextureRegions.size() == 0)
    {
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpForceFieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpSpeedTextureRegions;
    if (powerUpSpeedTextureRegions.size() == 0)
    {
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpSpeedTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpPushTextureRegions;
    if (powerUpPushTextureRegions.size() == 0)
    {
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpPushTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpShieldTextureRegions;
    if (powerUpShieldTextureRegions.size() == 0)
    {
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpShieldTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpRemoteBombTextureRegions;
    if (powerUpRemoteBombTextureRegions.size() == 0)
    {
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpRemoteBombTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpLandMineTextureRegions;
    if (powerUpLandMineTextureRegions.size() == 0)
    {
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpLandMineTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static std::vector<TextureRegion> powerUpCurseTextureRegions;
    if (powerUpCurseTextureRegions.size() == 0)
    {
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_2_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_3_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_4_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_5_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_6_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_7_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpCurseTextureRegions.push_back(TextureRegion(POWER_UP_FRAME_8_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float normalCycleTime = 0.80f;
    static std::vector<float> normalFrames;
    if (normalFrames.size() == 0)
    {
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
        normalFrames.push_back(0.1f);
    }
    
    static std::vector<TextureRegion> powerUpMegaFireTextureRegions;
    if (powerUpMegaFireTextureRegions.size() == 0)
    {
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_1_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_2_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_3_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_4_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_5_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_6_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_7_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_8_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
        powerUpMegaFireTextureRegions.push_back(TextureRegion(POWER_UP_MEGA_FIRE_FRAME_9_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024));
    }
    
    static float megaFireCycleTime = 0.90f;
    static std::vector<float> megaFireFrames;
    if (megaFireFrames.size() == 0)
    {
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
        megaFireFrames.push_back(0.1f);
    }

    switch (powerUp.getType())
    {
        case POWER_UP_TYPE_BOMB:
            return powerUpBombTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_FIRE:
            return powerUpFireTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_FORCE_FIELD:
            return powerUpForceFieldTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_SPEED:
            return powerUpSpeedTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_PUSH:
            return powerUpPushTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_SHIELD:
            return powerUpShieldTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_REMOTE_BOMB:
            return powerUpRemoteBombTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_LAND_MINE:
            return powerUpLandMineTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_CURSE:
            return powerUpCurseTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), normalCycleTime, normalFrames));
        case POWER_UP_TYPE_MEGA_FIRE:
            return powerUpMegaFireTextureRegions.at(getKeyFrameNumber(powerUp.getStateTime(), megaFireCycleTime, megaFireFrames));
        default:
            break;
    }
    
    // Default, but should never get this far...
    std::cout << "getPowerUpTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getLocalSettingsInterfaceTextureRegion(WaitingForLocalSettingsInterface &waitingForLocalSettingsInterface)
{
    static TextureRegion TR_LOCAL_SETTINGS_WITH_MAP_SPACE = TextureRegion(INTERFACE_OFFLINE_MENU_SPACE_TEXTURE_REGION_X, INTERFACE_OFFLINE_MENU_SPACE_TEXTURE_REGION_Y, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_WIDTH, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_LOCAL_SETTINGS_WITH_MAP_GRASSLANDS = TextureRegion(INTERFACE_OFFLINE_MENU_GRASSLANDS_TEXTURE_REGION_X, INTERFACE_OFFLINE_MENU_GRASSLANDS_TEXTURE_REGION_Y, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_WIDTH, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_LOCAL_SETTINGS_WITH_MAP_MOUNTAINS = TextureRegion(INTERFACE_OFFLINE_MENU_MOUNTAINS_TEXTURE_REGION_X, INTERFACE_OFFLINE_MENU_MOUNTAINS_TEXTURE_REGION_Y, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_WIDTH, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_LOCAL_SETTINGS_WITH_MAP_BASE = TextureRegion(INTERFACE_OFFLINE_MENU_BASE_TEXTURE_REGION_X, INTERFACE_OFFLINE_MENU_BASE_TEXTURE_REGION_Y, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_WIDTH, INTERFACE_OFFLINE_MENU_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    int mapType = waitingForLocalSettingsInterface.getChosenMapType();
    switch (mapType)
    {
        case MAP_SPACE:
            return TR_LOCAL_SETTINGS_WITH_MAP_SPACE;
        case MAP_GRASSLANDS:
            return TR_LOCAL_SETTINGS_WITH_MAP_GRASSLANDS;
        case MAP_MOUNTAINS:
            return TR_LOCAL_SETTINGS_WITH_MAP_MOUNTAINS;
        case MAP_BASE:
            return TR_LOCAL_SETTINGS_WITH_MAP_BASE;
        default:
            break;
    }
    
    // Default, but should never get this far...
    std::cout << "getLocalSettingsInterfaceTextureRegion else condition reached!" << std::endl;
    
    static TextureRegion defaultTextureRegion = TextureRegion(WORLD_BACKGROUND_TEXTURE_REGION_X, WORLD_BACKGROUND_TEXTURE_REGION_Y, WORLD_BACKGROUND_TEXTURE_REGION_WIDTH, WORLD_BACKGROUND_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    return defaultTextureRegion;
}

TextureRegion& Assets::getEnableBotButtonTextureRegion(EnableBotButton &enableBotButton)
{
    static TextureRegion playerRowBotAvatarBlackTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_BLACK_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_BLACK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarBlueTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_BLUE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_BLUE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarGreenTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_GREEN_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_GREEN_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarOrangeTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_ORANGE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_ORANGE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarPinkTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_PINK_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_PINK_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarRedTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_RED_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_RED_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarWhiteTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_WHITE_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_WHITE_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion playerRowBotAvatarYellowTextureRegion = TextureRegion(INTERFACE_2_BOT_AVATAR_YELLOW_TEXTURE_REGION_X, INTERFACE_2_BOT_AVATAR_YELLOW_TEXTURE_REGION_Y, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_WIDTH, INTERFACE_2_PLAYER_AVATAR_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (enableBotButton.getIndex())
    {
        case 0:
            return playerRowBotAvatarBlackTextureRegion;
        case 1:
            return playerRowBotAvatarBlueTextureRegion;
        case 2:
            return playerRowBotAvatarGreenTextureRegion;
        case 3:
            return playerRowBotAvatarOrangeTextureRegion;
        case 4:
            return playerRowBotAvatarPinkTextureRegion;
        case 5:
            return playerRowBotAvatarRedTextureRegion;
        case 6:
            return playerRowBotAvatarWhiteTextureRegion;
        case 7:
        default:
            return playerRowBotAvatarYellowTextureRegion;
    }
}

TextureRegion& Assets::getBotDifficultyTextTextureRegion(EnableBotButton &enableBotButton)
{
    static TextureRegion TR_DIFFICULTY_EASY = TextureRegion(EASY_DIFFICULTY_TEXTURE_REGION_X, EASY_DIFFICULTY_TEXTURE_REGION_Y, DIFFICULTY_TEXTURE_REGION_WIDTH, DIFFICULTY_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_DIFFICULTY_NORMAL = TextureRegion(NORMAL_DIFFICULTY_TEXTURE_REGION_X, NORMAL_DIFFICULTY_TEXTURE_REGION_Y, DIFFICULTY_TEXTURE_REGION_WIDTH, DIFFICULTY_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_DIFFICULTY_HARD = TextureRegion(HARD_DIFFICULTY_TEXTURE_REGION_X, HARD_DIFFICULTY_TEXTURE_REGION_Y, DIFFICULTY_TEXTURE_REGION_WIDTH, DIFFICULTY_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (enableBotButton.getDifficulty())
    {
        case BOT_DIFFICULTY_EASY:
            return TR_DIFFICULTY_EASY;
        case BOT_DIFFICULTY_NORMAL:
            return TR_DIFFICULTY_NORMAL;
        case BOT_DIFFICULTY_HARD:
        default:
            return TR_DIFFICULTY_HARD;
    }
}

TextureRegion& Assets::getEnablePowerUpButtonTextureRegion(EnablePowerUpButton &enablePowerUpButton)
{
    static TextureRegion TR_SPEED_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_SPEED_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_FORCE_FIELD_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_FORCE_FIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_FIRE_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_FIRE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_BOMB_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_LAND_MINE_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_LAND_MINE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_REMOTE_BOMB_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_REMOTE_BOMB_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_CURSE_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_CURSE_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_SHIELD_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_SHIELD_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_PUSH_CHOSEN = TextureRegion(POWER_UP_FRAME_1_TEXTURE_REGION_X, POWER_UP_PUSH_TEXTURE_REGION_Y, POWER_UP_TEXTURE_REGION_WIDTH, POWER_UP_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    switch (enablePowerUpButton.getChosenPowerUpFlag())
    {
        case PU_SPEED_CHOSEN:
            return TR_SPEED_CHOSEN;
        case PU_FORCE_FIELD_CHOSEN:
            return TR_FORCE_FIELD_CHOSEN;
        case PU_FIRE_CHOSEN:
            return TR_FIRE_CHOSEN;
        case PU_BOMB_CHOSEN:
            return TR_BOMB_CHOSEN;
        case PU_LAND_MINE_CHOSEN:
            return TR_LAND_MINE_CHOSEN;
        case PU_REMOTE_BOMB_CHOSEN:
            return TR_REMOTE_BOMB_CHOSEN;
        case PU_CURSE_CHOSEN:
            return TR_CURSE_CHOSEN;
        case PU_SHIELD_CHOSEN:
            return TR_SHIELD_CHOSEN;
        case PU_PUSH_CHOSEN:
        default:
            return TR_PUSH_CHOSEN;
    }
}

TextureRegion& Assets::getStartButtonTextureRegion(StartButton &startButton)
{
    static TextureRegion TR_ENABLED = TextureRegion(START_BUTTON_NORMAL_TEXTURE_REGION_X, START_BUTTON_NORMAL_TEXTURE_REGION_Y, START_BUTTON_TEXTURE_REGION_WIDTH, START_BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_HIGHLIGHTED = TextureRegion(START_BUTTON_HIGHLIGHTED_TEXTURE_REGION_X, START_BUTTON_HIGHLIGHTED_TEXTURE_REGION_Y, START_BUTTON_TEXTURE_REGION_WIDTH, START_BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    static TextureRegion TR_PRESSED = TextureRegion(START_BUTTON_PRESSED_TEXTURE_REGION_X, START_BUTTON_PRESSED_TEXTURE_REGION_Y, START_BUTTON_TEXTURE_REGION_WIDTH, START_BUTTON_TEXTURE_REGION_HEIGHT, TEXTURE_SIZE_1024x1024, TEXTURE_SIZE_1024x1024);
    
    Button_State buttonState = startButton.getButtonState();
    switch (buttonState)
    {
        case ENABLED:
            return TR_ENABLED;
        case HIGHLIGHTED:
            return TR_HIGHLIGHTED;
        case PRESSED:
        default:
            return TR_PRESSED;
    }
}

void Assets::setMusicId(short musicId)
{
    m_sMusicId = musicId;
}

short Assets::getMusicId()
{
    return m_sMusicId;
}

short Assets::getFirstSoundId()
{
    return m_sSoundIds.size() > 0 ? m_sSoundIds.front() : 0;
}

void Assets::addSoundIdToPlayQueue(short soundId)
{
    if (m_sSoundIds.size() < MAX_SOUNDS_TO_PLAY_PER_FRAME)
    {
        m_sSoundIds.push_back(soundId);
    }
}

void Assets::eraseFirstSoundId()
{
    if (m_sSoundIds.size() > 0)
    {
        m_sSoundIds.erase(m_sSoundIds.begin());
    }
}

int Assets::getKeyFrameNumber(float stateTime, float cycleTime, std::vector<float> &frameDurations)
{
    if (stateTime > cycleTime && cycleTime > 0)
    {
        while (stateTime > cycleTime)
        {
            stateTime -= cycleTime;
        }
    }

    for (unsigned int i = 0; i < frameDurations.size(); i++)
    {
        if (stateTime < frameDurations.at(i))
        {
            return i;
        }

        stateTime -= frameDurations.at(i);
    }

    return 0;
}

Assets::Assets()
{
    // Hide Constructor for Singleton
}